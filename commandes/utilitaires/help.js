const {
  SlashCommandBuilder,
  EmbedBuilder,
  ButtonBuilder,
  ActionRowBuilder,
  ButtonStyle,
} = require("discord.js");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("help")
    .setDescription("Affiche de l'aide pour les commandes disponibles")
    .addStringOption((option) =>
      option
        .setName("commande")
        .setDescription("Le nom de la commande pour plus d'infos")
        .setRequired(false)
    ),

  async execute(interaction) {
    const commandName = interaction.options.getString("commande");

    // Liste des commandes avec leurs descriptions et emojis
    const commands = [
      {
        name: "/infoutilisateur",
        description:
          "üßë‚Äçüíª Permet d'obtenir des informations sur le membre choisi !",
      },
      {
        name: "/infoserveur",
        description: "üí¨ Permet d'obtenir des informations sur le serveur !",
      },
      {
        name: "/confess",
        description:
          "ü§´ Permet d'envoyer un message anonyme (dr√¥le ou s√©rieux) dans le salon pr√©vu √† cet effet !",
      },
      {
        name: "/nude",
        description: "üòè Recevoir un DM de Tenmo avec une photo al√©atoire !",
      },
      {
        name: "/traduction",
        description:
          "üåç Permet de traduire le texte que tu souhaites dans une autre langue !",
      },
      {
        name: "/rouletterusse",
        description:
          "üî´ Permet de tenter ta chance avec une roulette russe qui se souvient du nombre de tirs effectu√©s !",
      },
      {
        name: "/rouletteglobale",
        description:
          "üé∞ Permet de tenter ta chance avec une roulette russe mais avec la m√™me arme pour tout le monde !",
      },
      {
        name: "/solde",
        description: "üí∞ Permet de voir ton compte bancaire !",
      },
      {
        name: "/transfert",
        description: "üîÑ Permet de transf√©rer tes pi√®ces √† un autre membre !",
      },
      {
        name: "/crime",
        description: "üí∏ Permet d'obtenir de l'argent gr√¢ce au crime !",
      },
      {
        name: "/daily",
        description: "üïê Permet d'obtenir des pi√®ces chaque jour !",
      },
      {
        name: "/hourly",
        description: "‚è≥ Permet d'obtenir quelques pi√®ces chaque heure !",
      },
      {
        name: "/blackjack",
        description: "üÉè Permet de jouer au blackjack en pariant tes pi√®ces !",
      },
      {
        name: "/roulette",
        description: "üé≤ Permet de jouer √† la roulette en pariant tes pi√®ces !",
      },
      {
        name: "/peche",
        description:
          "üé£ Permet de p√™cher des poissons en misant de l'argent en √©change !",
      },
      {
        name: "/vol",
        description:
          "üíº Permet d'essayer de voler les pi√®ces d'un autre joueur !",
      },
      {
        name: "/bourse",
        description: "üìà Permet de miser ton argent en bourse !",
      },
      {
        name: "/shop",
        description: "üõí Permet d'acc√©der au magasin du serveur !",
      },
      {
        name: "/inventaire",
        description: "üì¶ Permet d'acc√©der √† ton inventaire !",
      },
      {
        name: "/forceroulette",
        description: "üî´ Permet de forcer la roulette russe sur un membre !",
      },
    ];

    const commandsPerPage = 6; // Nombre de commandes par page
    const totalPages = Math.ceil(commands.length / commandsPerPage);

    // Si une commande sp√©cifique est demand√©e
    if (commandName) {
      return this.showCommandHelp(interaction, commandName);
    }

    // Fonction pour cr√©er l'embed avec pagination
    const createHelpEmbed = (page) => {
      const start = (page - 1) * commandsPerPage;
      const end = start + commandsPerPage;
      const currentCommands = commands.slice(start, end);

      const embed = new EmbedBuilder()
        .setColor("#28a745")
        .setTitle("Commandes Disponibles")
        .setDescription(
          currentCommands
            .map((c) => `**${c.name}** - ${c.description}`)
            .join("\n")
        )
        .setFooter({ text: `Page ${page} / ${totalPages}` })
        .setImage("https://giffiles.alphacoders.com/529/52912.gif"); // Gif de l'aide g√©n√©rale

      return embed;
    };

    // Cr√©e des boutons pour la navigation
    const createNavigationButtons = (page) => {
      const buttons = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("previous")
          .setLabel("‚¨ÖÔ∏è Pr√©c√©dent")
          .setStyle(ButtonStyle.Primary)
          .setDisabled(page === 1), // D√©sactive si on est √† la premi√®re page
        new ButtonBuilder()
          .setCustomId("next")
          .setLabel("Suivant ‚û°Ô∏è")
          .setStyle(ButtonStyle.Primary)
          .setDisabled(page === totalPages) // D√©sactive si on est √† la derni√®re page
      );

      return buttons;
    };

    try {
      // R√©ponse initiale avec l'embed et les boutons
      await interaction.reply({
        embeds: [createHelpEmbed(1)],
        components: [createNavigationButtons(1)],
      });

      let currentPage = 1;

      // Collecteur de boutons
      const filter = (button) => button.user.id === interaction.user.id;

      const collector = interaction.channel.createMessageComponentCollector({
        filter,
        time: 60000, // Temps en millisecondes (1 minute)
      });

      collector.on("collect", async (button) => {
        await button.deferUpdate(); // Confirme la r√©ception du bouton avant la modification

        if (button.customId === "next" && currentPage < totalPages) {
          currentPage++;
        } else if (button.customId === "previous" && currentPage > 1) {
          currentPage--;
        }

        // Mettre √† jour l'embed et les boutons pour la page suivante
        await interaction.editReply({
          embeds: [createHelpEmbed(currentPage)],
          components: [createNavigationButtons(currentPage)],
        });
      });

      collector.on("end", () => {
        // Retirer tous les boutons lorsque le temps est √©coul√©
        interaction.editReply({
          components: [],
        });
      });
    } catch (error) {
      console.error(
        "Erreur lors de l'envoi du message ou des boutons : ",
        error
      );
      interaction.reply({
        content: "Une erreur s'est produite lors de l'envoi des informations.",
      });
    }
  },

  // Fonction pour afficher l'aide d'une commande sp√©cifique
  async showCommandHelp(interaction, commandName) {
    let description = "";

    switch (commandName.toLowerCase()) {
      case "infoutilisateur":
        description =
          "Cette commande te donnera des informations sur le membre choisi, telles que la date √† laquelle il a rejoint Discord, le serveur, son ID et sa photo de profil !";
        break;
      case "infoserveur":
        description =
          "Cette commande te donnera des informations sur le serveur, telles que la date de cr√©ation, le nombre de membres, la banni√®re ou la photo de profil !";
        break;
      case "solde":
        description =
          "Cette commande te permet de conna√Ætre ton solde bancaire. Elle te montre ton nombre de pi√®ces (monnaie courante) et de champignons (monnaie d'event) avec un message du banquier Temmie.";
        break;
      case "nude":
        description =
          "Cette commande te permet de recevoir de Tenmo une image ou un gif rigolo avec une petite chance que ce soit lui en petite tenue.";
        break;
      case "confess":
        description =
          "Cette commande te permet d'envoyer un message anonyme dans le salon sp√©cifique ! Cela te permet de parler √† c≈ìur ouvert sans peur du jugement car personne ne sait qui tu es !";
        break;
      case "traduction":
        description =
          "Cette commande te permet de traduire un texte. Tu n'as qu'√† choisir la langue de traduction et noter le message d'origine !";
        break;
      case "rouletterusse":
        description =
          "Cette commande te permet de jouer √† la roulette russe tout seul. Ton arme est un revolver avec 1 balle, √† toi de voir jusqu'o√π tu es pr√™t √† jouer. Les balles sont sauvegard√©es, donc chaque choix a une cons√©quence.";
        break;
      case "rouletteglobale":
        description =
          "Cette commande te permet de jouer √† la roulette avec les autres membres du serveur. Les balles sont sauvegard√©es pour tous. Le nombre de balles est al√©atoire √† chaque recharge.";
        break;
      case "shop":
        description =
          "Cette commande te permet d'acc√©der au magasin du serveur ! Tu peux acheter des items et des accessoires pour personnaliser ton exp√©rience !";
        break;
      // Ajoutez d'autres commandes ici
      default:
        description = "D√©sol√©, je ne connais pas cette commande.";
        break;
    }

    const embed = new EmbedBuilder()
      .setColor("#28a745")
      .setTitle(`Aide pour la commande : ${commandName}`)
      .setDescription(description);

    return interaction.reply({ embeds: [embed] });
  },
};
