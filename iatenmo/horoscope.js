/*const OpenAI = require("openai");
const { OPENAI_API_KEY } = require("../config.json");

const openai = new OpenAI({
  apiKey: OPENAI_API_KEY, // Assurez-vous que l'API KEY est d√©finie dans votre environnement
});

const zodiacSigns = [
  "B√©lier",
  "Taureau",
  "G√©meaux",
  "Cancer",
  "Lion",
  "Vierge",
  "Balance",
  "Scorpion",
  "Sagittaire",
  "Capricorne",
  "Verseau",
  "Poissons",
];

// G√©n√©rer un horoscope pour chaque signe (format court et humoristique)
async function generateHoroscopes() {
  const horoscopes = [];

  for (let i = 0; i < zodiacSigns.length; i++) {
    const sign = zodiacSigns[i];
    const horoscope = await getHoroscopeForSign(sign);
    horoscopes.push(`${sign.toUpperCase()} ${horoscope}`);
  }

  return horoscopes.join("\n\n");
}

// Fonction pour g√©n√©rer un horoscope pour un signe sp√©cifique
async function getHoroscopeForSign(sign) {
  const conversation = [
    {
      role: "system",
      content: `
      Tu es un astrologue d√©cal√© et humoristique. Chaque horoscope doit √™tre rempli de surprises, de myst√®res, et une bonne dose de rigolade ! Garde en t√™te que chaque signe du zodiaque m√©rite une pr√©vision farfelue mais cr√©dible, avec des emojis. Sois fun et un peu d√©cal√©, mais reste dans le ton du zodiaque. 
      La r√©ponse doit forc√©ment √™tre un seul court paragraphe, avec des suggestions amusantes, des r√©f√©rences farfelues, des emojis, et une touche l√©g√®re mais significative.
      Le texte doit √™tre structur√© comme une pr√©vision comique et doit √™tre d'environ 3 phrases.
      Tu ne dois que donner l'horoscope du jour pas du mois. 
      `,
    },
    {
      role: "user",
      content: `Fais-moi l'horoscope pour le signe ${sign} avec une touche d'humour et d'originalit√©, s'il te pla√Æt !`,
    },
  ];

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: conversation,
    });

    // Retourner la r√©ponse g√©n√©r√©e par OpenAI
    return response.choices[0].message.content.trim();
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration de l'horoscope:", error);
    return "D√©sol√©, l'horoscope est en pause... Les champignons se sont rebell√©s ! üçÑ";
  }
}

// Fonction pour envoyer l'horoscope complet dans le salon Discord
async function sendHoroscope(channel) {
  let horoscopeMessage = await generateHoroscopes();

  const maxMessageLength = 2000;
  while (horoscopeMessage.length > maxMessageLength) {
    await channel.send(horoscopeMessage.slice(0, maxMessageLength));
    horoscopeMessage = horoscopeMessage.slice(maxMessageLength);
  }

  await channel.send(horoscopeMessage);
}

// Fonction principale appel√©e dans le ready.js
module.exports = async function tenmohoroscope(client) {
  const channelId = "1332366656428572693"; // Remplacez par l'ID de votre salon Discord

  try {
    const channel = await client.channels.fetch(channelId);
    if (!channel) {
      console.error("‚ùå Salon introuvable !");
      return;
    }

    let lastSentTime = null;
    let isPaused = false; // Indicateur pour savoir si on est en pause

    setInterval(async () => {
      if (isPaused) return; // Si on est en pause, ne pas v√©rifier

      const now = new Date();
      const hours = now.getHours().toString().padStart(2, "0");
      const minutes = now.getMinutes().toString().padStart(2, "0");
      const currentTime = `${hours}:${minutes}`;

      // V√©rifie si l'heure est 12:00 (ou toute autre heure de votre choix)
      if (hours === "11" && minutes === "51" && lastSentTime !== currentTime) {
        try {
          // V√©rifie que le channel est de type textuel
          if (channel.type === "text" || channel.isTextBased()) {
            await sendHoroscope(channel);
            console.log(`‚úÖ Horoscope envoy√© √† ${currentTime}`);
            lastSentTime = currentTime; // Emp√™che les doublons pour cette heure

            isPaused = true; // Active la pause apr√®s l'envoi de l'horoscope
            console.log("‚è∏Ô∏è Pause d'horoscope activ√©e");

            // R√©active la v√©rification apr√®s 20 minutes
            setTimeout(() => {
              isPaused = false;
              console.log("‚ñ∂Ô∏è Pause termin√©e, reprise des v√©rifications.");
            }, 20 * 60 * 1000); // 20 minutes en millisecondes
          } else {
            console.error("‚ùå Le canal n'est pas un canal textuel.");
          }
        } catch (error) {
          console.error("‚ùå Erreur lors de l'envoi de l'horoscope :", error);
        }
      }
    }, 30 * 1000); // V√©rifie toutes les 3 secondes
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration du salon :", error);
  }
};
*/
