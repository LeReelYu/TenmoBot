const { Events, ActivityType } = require("discord.js");
const config = require("../config.json");
const autofeur = require("../autoscript/autofeur");
const bjorn = require("../autoscript/bjorn");
const sequelize = require("../Sequelize/sequelize");
const fotd = require("../autoscript/fotd");
const tenmoai = require("../iatenmo/tenmoai");
const tenmohoroscope = require("../iatenmo/horoscope");
const autochannel = require("../autoscript/autochannel");
const Economie = require("../Sequelize/mod√®les/√©conomie");

module.exports = {
  name: Events.ClientReady,
  once: true,
  async execute(client) {
    // On rend 'execute' asynchrone pour utiliser 'await'
    console.log(`üî• Capitaine ${client.user.tag} au rapport !`);

    autofeur(client); // Lancement du script autofeur
    bjorn(client); // Lancement du script bjorn
    fotd(client);
    tenmoai(client);
    tenmohoroscope(client);
    autochannel(client);

    sequelize.sync().then(() => {
      console.log("üì¶ Base de donn√©es synchronis√©e !");
    });

    // üéÆ D√©finition de la Rich Presence dynamique
    const statuses = [
      { name: "son nombre de champignons pos√©s", type: ActivityType.Watching },
      { name: "placer plus de champignons", type: ActivityType.Playing },
      { name: "les pleurs des faibles", type: ActivityType.Listening },
    ];

    let i = 0;
    const updatePresence = () => {
      const status = statuses[i % statuses.length];
      client.user.setPresence({ activities: [status], status: "online" });
      i++;
    };

    // D√©finir imm√©diatement la pr√©sence et changer toutes les 5 minutes
    updatePresence();
    setInterval(updatePresence, 300000); // 30 minutes = 1800000 ms

    console.log("üéÆ Rich Presence activ√©e !");

    // V√©rifier que tous les utilisateurs dans le serveur ont une entr√©e dans la base de donn√©es
    try {
      // R√©cup√©rer le guildId depuis ton config.json
      const { guildId } = config;

      // R√©cup√©rer le serveur (guild)
      const guild = await client.guilds.fetch(guildId);
      const members = await guild.members.fetch(); // R√©cup√©rer tous les membres du serveur

      // Parcours de tous les membres et v√©rification de leur compte dans la base de donn√©es
      for (const member of members.values()) {
        const existingUser = await Economie.findOne({
          where: { userId: member.id },
        });

        if (!existingUser) {
          // Si l'utilisateur n'a pas de compte, en cr√©er un avec un solde initial
          await Economie.create({
            userId: member.id,
            champignons: 0, // Valeur initiale pour champignons
            pi√®ces: 0, // Valeur initiale pour pi√®ces
          });
          console.log(`Compte cr√©√© pour ${member.user.tag}`);
        }
      }

      console.log(
        "üíµTous les comptes ont √©t√© v√©rifi√©s et cr√©√©s si n√©cessaire."
      );
    } catch (error) {
      console.error(
        "Erreur lors de la v√©rification des comptes des membres:",
        error
      );
    }
  },
};
