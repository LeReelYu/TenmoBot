const { SlashCommandBuilder, PermissionFlagsBits } = require("discord.js");
const RusseGlobal = require("../../Sequelize/mod√®les/russeglobal"); // Importation du mod√®le global

module.exports = {
  data: new SlashCommandBuilder()
    .setName("rouletteglobale")
    .setDescription("üé≤ Roulette partag√©e pour tous les membres !")
    .setDefaultMemberPermissions(PermissionFlagsBits.SendMessages), // Accessible √† tous

  async execute(interaction) {
    const user = interaction.member;
    const username = user.displayName;

    // R√©cup√©rer l'√©tat du chargeur global
    let game = await RusseGlobal.findOne({ where: {} });

    // Si aucun enregistrement, on initialise un nouveau chargeur global
    if (!game) {
      game = await RusseGlobal.create({ remainingShots: 6 });
    }

    // D√©finir un nombre al√©atoire de balles perdantes (par exemple 1 √† 3 balles perdantes)
    const maxLostBalls = 3; // Maximum de balles perdantes
    const lostBallsCount = Math.floor(Math.random() * maxLostBalls) + 1; // Nombre de balles perdantes (1 √† maxLostBalls)

    // Cr√©e un tableau qui contient `lostBallsCount` balles perdantes
    const balls = Array(game.remainingShots).fill("safe"); // Par d√©faut, toutes les balles sont s√ªres
    for (let i = 0; i < lostBallsCount; i++) {
      const randomIndex = Math.floor(Math.random() * game.remainingShots); // Choisir une balle au hasard pour √™tre perdante
      balls[randomIndex] = "lost"; // Marquer cette balle comme perdante
    }

    // Annonce du d√©but du jeu
    await interaction.reply(
      `üî´ **${username} tente sa chance √† la roulette de Bandle √©dition familiale...** üé∞`
    );

    // Attente de 10 secondes
    await new Promise((resolve) => setTimeout(resolve, 10000));

    // D√©cr√©mentation des balles du chargeur global
    game.remainingShots--;

    // Tirer une balle (v√©rifier si c'est une balle perdante)
    const rollResult = balls[game.remainingShots];

    if (rollResult === "lost") {
      // V√©rifie si le bot a la permission de mute
      if (
        !interaction.guild.members.me.permissions.has(
          PermissionFlagsBits.ModerateMembers
        )
      ) {
        return interaction.followUp({
          content: "‚ùå Je n'ai pas la permission de mute les membres !",
          ephemeral: true,
        });
      }

      // V√©rifie si l'utilisateur peut √™tre mute
      if (!user.moderatable) {
        return interaction.followUp(
          `üé≤ **${username} aurait perdu...** mais je vois que tu as pris tes pr√©cautions !`
        );
      }

      try {
        // Mute l'utilisateur pendant 60 secondes
        await user.timeout(60 * 1000, "Perdu √† la roulette de Bandle !");
        await interaction.followUp(
          `üé≤ **Oh non ${username}... C'√©tait une vraie balle... !**`
        );
      } catch (error) {
        console.error("Erreur lors du mute :", error);
        await interaction.followUp({
          content: "‚ùå Impossible de te mute, je ne comprends pas !",
        });
      }

      // R√©initialiser le chargeur apr√®s une perte
      await game.update({ remainingShots: 6 });
    } else {
      await interaction.followUp(
        `üé≤ **${username} a tir√© une balle √† blanc... Tu survis pour l'instant !**`
      );
    }

    // Sauvegarde l'√©tat du chargeur apr√®s un tir
    await game.save();

    // Recharge automatique si le chargeur est vide
    if (game.remainingShots === 0) {
      await game.update({ remainingShots: 6 });
      await interaction.followUp(
        `üîÑ Le chargeur est vide ! Je vais le recharger avec tout ce que j'ai !`
      );
    }
  },
};
